// Generated by CoffeeScript 1.7.1
(function() {
  var Item, ItemView, List,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      return Item.__super__.constructor.apply(this, arguments);
    }

    Item.prototype.defaults = {
      part1: "Hello",
      part2: "World"
    };

    return Item;

  })(Backbone.Model);

  List = (function(_super) {
    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.prototype.model = Item;

    return List;

  })(Backbone.Collection);

  ItemView = (function(_super) {
    __extends(ItemView, _super);

    function ItemView() {
      return ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.tagName = 'li';

    ItemView.prototype.initialize = function() {
      return _.bindAll(this);
    };

    ItemView.prototype.render = function() {
      $(this.el).html("<a><span>" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "</span></a>");
      $(this.el).find('a').attr("href", "http://www.google.com/");
      return this;
    };

    return ItemView;

  })(Backbone.View);

  window.ListView = Backbone.View.extend({
    el: $('body'),
    initialize: function() {
      _.bindAll(this);
      this.collection = new List;
      this.collection.bind("add", this.appenditem);
      this.counter = 0;
      this.render();
      return this.additem();
    },
    render: function() {
      $(this.el).append('<button>Press me!</button>');
      return $(this.el).append('<ul></ul>');
    },
    additem: function() {
      var item;
      this.counter++;
      item = new Item();
      item.set({
        part2: "" + (item.get('part2')) + " " + this.counter
      });
      item.set({
        part1: "" + this.param + " " + (item.get('part1')) + " " + (Math.floor(Math.random() * 100))
      });
      return this.collection.add(item);
    },
    appenditem: function(item) {
      var item_view;
      item_view = new ItemView({
        model: item
      });
      return $("ul").append(item_view.render().el);
    },
    events: {
      "click button": "additem"
    }
  });

  jQuery(function() {
    var list_view;
    return list_view = new ListView();
  });

}).call(this);
